*** Why Using @Nested Is Useful for Testing ***


Improved Readability: ***
Grouping related tests together makes the test suite easier to read and understand. Instead of a flat list of test methods, you get a hierarchical structure that reflects the functionality being tested (e.g., adding/removing vs. searching).

Better Organization: ***
As the number of tests grows, @Nested helps organize them into logical categories, making it easier to navigate the test class.

Isolation of Test Scenarios: ***
Each nested class can have its own setup (e.g., with its own @BeforeEach if needed), allowing you to isolate test scenarios. For example, you could set up a library with specific books for search tests without affecting addition/removal tests.

Easier Maintenance: ***
When debugging or adding new tests, you can focus on a specific group of related tests, reducing cognitive load. For instance, if a search-related bug arises, you can go directly to the BookSearchTests group.

Clear Reporting: ***
In test reports (e.g., in IntelliJ or CI tools like Jenkins), the nested structure makes it clear which area of functionality is failing, improving traceability.